name: ci

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Format
      run: cargo fmt --all -- --check
    - name: Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  test-linux:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-22.04, arch: x86_64, feature: native }
          - { os: ubuntu-22.04, arch: x86_64, feature: avx2 }

    steps:
      - uses: actions/checkout@v4

      # refer to https://vulkan.lunarg.com/doc/view/latest/linux/getting_started_ubuntu.html
      - name: install vulkan sdk
        shell: bash
        run: |
          set -e

          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list http://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
          sudo apt update
          sudo apt install vulkan-sdk
          # Install OpenGL drivers
          sudo apt install mesa-vulkan-drivers
          # Refer to https://github.com/gfx-rs/wgpu/issues/5086
          sudo apt install vulkan-validationlayers

      - name: set build env vars
        run: |
          if [ "${{ matrix.config.feature }}" = "avx2" ]; then
            flags="-C target-feature=+avx2"
            echo "RUSTFLAGS=${flags}" >> $GITHUB_ENV
          fi

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --verbose

  test-windows:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: windows-latest, arch: x86_64, feature: native }
          - { os: windows-latest, arch: x86_64, feature: avx2 }

    steps:
      - uses: actions/checkout@v4
      # - name: install vulkan sdk
      #   run: |
      #     curl.exe -o $env:RUNNER_TEMP/VulkanSDK-Installer.exe -L "https://sdk.lunarg.com/sdk/download/1.3.296.0/windows/VulkanSDK-1.3.296.0-Installer.exe"
      #     & "$env:RUNNER_TEMP\VulkanSDK-Installer.exe" --accept-licenses --default-answer --confirm-command install
      #     Add-Content $env:GITHUB_ENV "VULKAN_SDK=C:\VulkanSDK\1.3.296.0"
      #     Add-Content $env:GITHUB_PATH "C:\VulkanSDK\1.3.296.0\bin"

      - name: install ninja
        run: |
          choco install ninja

      - name: set build env vars
        if: matrix.config.feature == 'avx2'
        run: |
          $env:RUSTFLAGS="-C target-feature=+avx2"

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p crabml --verbose

  test-macos:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: macos-latest, arch: aarch64, feature: native }
          - { os: macos-latest, arch: aarch64, feature: neon }
    steps:
      - name: set build env vars
        run: |
          if [ "${{ matrix.config.feature }}" = "neon" ]; then
            flags="-C target-feature=+neon"
            echo "RUSTFLAGS=${flags}" >> $GITHUB_ENV
          fi

      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p crabml --verbose
